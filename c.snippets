###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define $1
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet date
/*`date`*/
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet void "argv argc"
(void) argv;
(void) argc;
${0}
endsnippet

snippet inc "#include"
#include <${1:stdio.h}>
endsnippet

snippet if "if"
if(${1})
{
	${0}
}
endsnippet

snippet el "else"
else
{
	${0}
}
endsnippet

snippet elif "else if"
else if(${1})
{
	${0}
}
endsnippet

snippet ife "if else"
if(${1})
{
	${2}
}
else
{
	${0}
}
endsnippet

snippet for
for(size_t i = 0; i < ${1:count}; ++i)
{
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}$0
}
endsnippet

snippet foor "for empty loop"
for(${1})
{
	${0}
}
endsnippet

snippet wh "while"
while(${1})
{
	${0}
}
endsnippet

snippet do "do while"
do
{
	${1}
} while(${0});
endsnippet

snippet switch "switch"
switch(${1})
{
	case ${2}:
		${3}
		break;
	default :
		${0}
		break;
}
endsnippet

snippet case "case"
case ${1}:
	${2}
	${3:break;}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

snippet new "new line"
putchar('\n');
endsnippet

snippet file_read "scan txt file"
FILE *${1:fr} = fopen(${2:"file_name"}, "r");
if($1)
{
	char buff[255];
	while(fgets(buff, 255, (FILE*)$1))
	{
		printf("%s", buff);
	}
	fclose($1);
}
endsnippet

snippet file_write "write into text file"
FILE *${1:fw}  = fopen(${2:"file_name"}, "w");
$0
fclose($1);
endsnippet

snippet file_append "append into text file"
FILE *${1:fa}  = fopen(${2:"file_name"}, "a");
$0
fclose($1);
endsnippet

# vim:ft=snippets:
